{"version":3,"sources":["routes.js","Pages/Personal_info.js","Pages/Landing.js","components/ButtonTab.js","components/SelectedTab.js","Pages/Symptoms.js","Pages/SymptomList.js","Pages/PreliminaryDiagnosis.js","Pages/confirmation.js","App.js","serviceWorker.js","index.js"],"names":["ROUTES","LANDING","INFO","SYMPTOMS","SYMPTOM_LIST","PRELIMINARYDIAGNOSIS","CLINICS","CONFIRMATION","INITIAL_STATE","firstName","lastName","email","date","location","error","React","Component","ButtonTab","props","useState","Marked","marked","isMarked","arr","array","nameArr","nameArray","id","name","type","useEffect","includes","Col","md","span","offset","Button","onClick","index","findIndex","value","splice","nameIndex","updateArray","push","style","fontSize","width","backgroundColor","border","borderRadius","color","SelectedTab","list","className","paddingRight","isDiagnosis","deletion","console","log","filter","element","label","deletionObj","handleClick","animatedComponents","makeAnimated","NamesTab","localStorage","getItem","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8XACaA,G,iBAAS,CAClBC,QAAS,IACTC,KAAM,iBACNC,SAAU,gBACVC,aAAc,eACdC,qBAAsB,wBACtBC,QAAS,mBACTC,aAAc,uB,qHCCZC,G,YAAgB,CACpBC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,KAAM,GACNC,SAAU,GACVC,MAAO,O,GAGmBC,IAAMC,U,MCZZD,IAAMC,U,6BCFb,SAASC,EAAUC,GAAQ,IAAD,EACVC,mBAAS,CAACC,QAAQ,IADR,mBAC9BC,EAD8B,KACtBC,EADsB,KAE/BC,EAAML,EAAMM,MACZC,EAAUP,EAAMQ,UAChBC,EAAKT,EAAMS,GACXC,EAAOV,EAAMW,KAQnB,OANAC,qBAAU,WACHL,EAAQM,SAASH,IAChBN,EAAS,CAACF,QAAQ,MAEvB,CAACK,IAGA,kBAACO,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQjB,EAAMiB,OAASjB,EAAMiB,OAAS,IACtD,kBAACC,EAAA,EAAD,CAAQC,QAAS,WACb,GAAIhB,EAAOD,OAKJ,CACH,IAAMkB,EAAQf,EAAIgB,WAAU,SAAAC,GAAK,OAAIA,IAAUb,KAC/CJ,EAAIkB,OAAOH,EAAO,GAClB,IAAMI,EAAYjB,EAAQc,WAAU,SAAAC,GAAK,OAAIA,IAAUZ,KACvDH,EAAQgB,OAAOC,EAAW,GAC1BxB,EAAMyB,YAAYpB,EAAKE,GACvBH,EAAS,CAACF,QAAQ,SAVlBG,EAAIqB,KAAKjB,GACTF,EAAQmB,KAAKhB,GACbV,EAAMyB,YAAYpB,EAAKE,GACvBH,EAAS,CAACF,QAAQ,KAU1ByB,MAAO,CAACC,SAAU,cAAeC,MAAO,cAAeC,gBAAiB3B,EAAOD,OAAS,UAAY,UACpG6B,OAAQ,OAAQC,aAAc,YAAaC,MAAO,UAChDvB,I,MChCC,SAASwB,EAAYlC,GAChC,IAAMU,EAAOV,EAAMU,KACbyB,EAAOnC,EAAMmC,KAenB,OACI,yBAAKC,UAAU,UAAUT,MAAO,CAACU,aAAcrC,EAAMsC,YAAc,cAAgB,OAC/E,wBAAIF,UAAU,gBAAiB1B,GAC9BV,EAAMsC,YAAc,KACrB,yBAAKF,UAAU,iBAAiBjB,QAAS,kBAjB7B,WAChB,GAAGnB,EAAMuC,SAAU,CACfC,QAAQC,IAAI,QACZ,IAAMrB,EAAQe,EAAKd,WAAU,SAAAC,GAAK,OAAIA,IAAUZ,KAChD8B,QAAQC,IAAIrB,GACZe,EAAKZ,OAAOH,EAAO,GACnBpB,EAAMuC,SAASJ,OACZ,CACH,IAAM7B,EAAQ6B,EAAKO,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUlC,KACvDV,EAAM6C,YAAYvC,IAQ6BwC,KAC3C,wBAAIV,UAAU,cAAd,O,YChBOvC,IAAMC,U,4BCAvBiD,EAAqBC,cAErBC,EAAWC,aAAaC,QAAQ,gB,GAEZtD,IAAMC,U,cCNGD,IAAMC,UCNdD,IAAMC,UCsClBsD,MArBf,aCPoBC,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACL4C,QAAQ5C,MAAMA,EAAMyE,c","file":"static/js/main.ddf4f54f.chunk.js","sourcesContent":["/* Temp routes for testing, update later for prod */\r\nexport const ROUTES = {\r\n    LANDING: \"/\",\r\n    INFO: \"/personal_info\",\r\n    SYMPTOMS: \"/bodysymptoms\",\r\n    SYMPTOM_LIST: \"/symptomlist\",\r\n    PRELIMINARYDIAGNOSIS: \"/preliminarydiagnosis\",\r\n    CLINICS: \"/clinics_near_me\",\r\n    CONFIRMATION: \"/confirmation_page\",\r\n  };","import React from 'react';\r\nimport { Container, Form, Col, Button, Card, ProgressBar } from \"../../node_modules/react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { ROUTES } from \"../routes\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"../css/personal_info.css\";\r\n// For the progress bar\r\nimport \"../App.css\";\r\n\r\nconst INITIAL_STATE = {\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  date: '',\r\n  location: '',\r\n  error: null,\r\n};\r\n\r\nclass Personal_info extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = { ...INITIAL_STATE };\r\n  }\r\n\r\n  onSubmit = event => {\r\n    const { ...INITIAL_STATE } = this.state;\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({ [target.name]: target.value });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      date,\r\n      location,\r\n      error,\r\n    } = this.state;\r\n\r\n    const isInvalid =\r\n    firstName === '' || lastName === '' ||\r\n    email === '' || date === '' || location === '';\r\n\r\n    return(\r\n\r\n      <React.Fragment>\r\n      \r\n      <Container>\r\n          <Card style={{padding: '20px'}}>\r\n          <h1 class= \"title\">Let's get some information (?)</h1>\r\n          <Form onSubmit={this.onSubmit}>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridFirstName\">\r\n              <Form.Label class=\"font-weight-bold\">First Name</Form.Label>\r\n              <Form.Control \r\n                  name=\"firstName\"\r\n                  value={firstName}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\" \r\n              />\r\n            </Form.Group>\r\n\r\n          <Form.Group as={Col} controlId=\"formGridLastName\">\r\n              <Form.Label class=\"font-weight-bold\">Last Name</Form.Label>\r\n              <Form.Control \r\n                  name=\"lastName\"\r\n                  value={lastName}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n              />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Group controlId=\"formGridEmailAddress\">\r\n            <Form.Label class=\"font-weight-bold\">Email Address</Form.Label>\r\n            <Form.Control\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.handleChange}\r\n                type=\"email\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formGridDateOfBirth\">\r\n            <Form.Label class=\"font-weight-bold\">Date of Birth</Form.Label>\r\n            <Form.Control \r\n                name=\"date\"\r\n                value={date}\r\n                onChange={this.handleChange}\r\n                type=\"date\" \r\n                placeholder= \"YYYY-MM-DD\" \r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridZipCode\">\r\n              <Form.Label class=\"font-weight-bold\">Location</Form.Label>\r\n              <Form.Control \r\n                name=\"location\"\r\n                value={location}\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                placeholder=\"Zip Code\" \r\n                maxLength={6}\r\n              />\r\n          </Form.Group>\r\n          </Form.Row>\r\n          \r\n          <div class=\"text-center\">\r\n            <Link to={ROUTES.SYMPTOMS}>\r\n              <Button \r\n                      disabled={isInvalid}\r\n                      class=\"text-center\" \r\n                      onClick={() => {\r\n                        console.log(\"The button has been clicked\");\r\n                        localStorage.setItem('age', this.state.date.substring(0, 3));\r\n                      }}\r\n                      variant=\"primary\" \r\n                      type=\"submit\">\r\n                Next: Select Symptoms\r\n              </Button>\r\n              {error && <p>{error.message}</p>}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n        </Card>\r\n      \r\n      </Container>\r\n\r\n      <div className=\"progress-bar-div\">\r\n        <div className=\"progress-bar-div-center\">\r\n          <ProgressBar now={20} label={\"20%\"} />\r\n        </div>\r\n      </div>\r\n\r\n    </React.Fragment>\r\n    ); \r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Personal_info","import React from 'react'\r\nimport { Container, Row, Col, Button} from 'react-bootstrap';\r\nimport { ROUTES } from '../routes';\r\nimport {Link} from \"react-router-dom\";\r\nimport '../css/landing.css';\r\n\r\nclass Landing extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"background-div\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"title\">Welcome to this Website</h1>\r\n          <p align=\"center\">This website is dedicated to help people that are\r\n          in need of a doctor's appointment</p>\r\n          <Link to={ROUTES.INFO}>\r\n            <Button \r\n                  onClick={()=>{\r\n                    console.log(\"Button has been clicked\");\r\n                  }}\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  style={{marginTop: 'calc(16vh)'}}>Get Started</Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n  )\r\n  }\r\n}\r\nexport default Landing;","import React, { useState, useEffect } from 'react';\r\nimport { Button, Col } from 'react-bootstrap';\r\nimport '../css/Symptoms.css';\r\n\r\nexport default function ButtonTab(props) {\r\n    const [marked, isMarked] = useState({Marked: false});\r\n    const arr = props.array;\r\n    const nameArr = props.nameArray;\r\n    const id = props.id;\r\n    const name = props.type;\r\n\r\n    useEffect(() => {\r\n        if(nameArr.includes(name)) {\r\n            isMarked({Marked: true});\r\n        }\r\n    }, [nameArr]);\r\n\r\n    return (\r\n        <Col md={{ span: 1, offset: props.offset ? props.offset : 1 }}>\r\n            <Button onClick={() => {\r\n                if(!marked.Marked) {\r\n                    arr.push(id);\r\n                    nameArr.push(name)\r\n                    props.updateArray(arr, nameArr);\r\n                    isMarked({Marked: true});\r\n                } else {\r\n                    const index = arr.findIndex(value => value === id);\r\n                    arr.splice(index, 1);\r\n                    const nameIndex = nameArr.findIndex(value => value === name)\r\n                    nameArr.splice(nameIndex, 1);\r\n                    props.updateArray(arr, nameArr);\r\n                    isMarked({Marked: false});\r\n                }\r\n            }}\r\n            style={{fontSize: 'calc(1.2vw)', width: 'calc(8.5vw)', backgroundColor: marked.Marked ? '#789E9E' : '#B7D8D6', \r\n            border: 'none', borderRadius: 'calc(1vw)', color: 'black'}}\r\n            >{name}</Button>\r\n        </Col>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Button, Col } from 'react-bootstrap';\r\nimport '../css/SymptomList.css';\r\n\r\nexport default function SelectedTab(props) {\r\n    const name = props.name;\r\n    const list = props.list;\r\n\r\n    const handleClick = () => {\r\n        if(props.deletion) {\r\n            console.log('here')\r\n            const index = list.findIndex(value => value === name);\r\n            console.log(index);\r\n            list.splice(index, 1);\r\n            props.deletion(list);\r\n        } else {\r\n            const array = list.filter(element => element.label !== name);\r\n            props.deletionObj(array);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"tab-div\" style={{paddingRight: props.isDiagnosis ? 'calc(1.5vw)' : null}}>\r\n            <h3 className=\"tab-div-name\" >{name}</h3>  \r\n            {props.isDiagnosis ? null : \r\n            <div className=\"remove-tab-div\" onClick={() => handleClick()}>\r\n                <h2 className=\"remove-tab\">X</h2> \r\n            </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Button, ProgressBar } from 'react-bootstrap';\r\nimport ButtonTab from '../components/ButtonTab';\r\nimport SelectedTab from '../components/SelectedTab';\r\nimport '../css/Symptoms.css';\r\nimport '../App.css';\r\nimport Breadcrumbs from './Breadcrumbs';\r\nimport { Link } from \"react-router-dom\";\r\nimport { ROUTES } from \"../routes\";\r\n\r\nclass Symptoms extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      MarkedSymptoms: [],\r\n      NameSymptoms: localStorage.getItem('symptom-body') !== null && localStorage.getItem('symptom-body') !== undefined ? JSON.parse(localStorage.getItem('symptom-body')) : [],\r\n      isDisabled: localStorage.getItem('symptom-body') !== null && localStorage.getItem('symptom-body') !== undefined ? false : true,\r\n    }\r\n\r\n    this.updateMarkedSymptoms = this.updateMarkedSymptoms.bind(this);\r\n    this.removeName = this.removeName.bind(this);\r\n  }\r\n\r\n  updateMarkedSymptoms(value, name) {\r\n    if(name.length === 0) {\r\n      this.setState({isDisabled: true});\r\n    } else {\r\n      this.setState({isDisabled: false});\r\n    }\r\n    this.setState({MarkedSymptoms: value, NameSymptoms: name}, () => {\r\n      const uniqueIds = Array.from(new Set(this.state.MarkedSymptoms));\r\n      localStorage.setItem('symptomIds', JSON.stringify(uniqueIds));\r\n      localStorage.setItem('symptom-body', JSON.stringify(this.state.NameSymptoms))\r\n    });\r\n  }\r\n\r\n  removeName(list) {\r\n    this.setState({NameSymptoms: list}, () => {\r\n        localStorage.setItem('symptom-body', JSON.stringify(this.state.NameSymptoms));\r\n        window.location.reload();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.NameSymptoms)\r\n    return (\r\n      <div className=\"symptoms-page\">\r\n        <Container fluid>\r\n          <Row style={{marginTop: 'calc(5vh)'}}>\r\n            <Col md={{ span: 7, offset: 3 }}><h2 className=\"symptoms-page-h2\">Where on the body are you experiencing symptoms (if any)</h2></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <section className=\"selected-section\">\r\n          <div className=\"select-div\">\r\n              {this.state.NameSymptoms.map(name => {\r\n                  return (\r\n                      <SelectedTab key={name} name={name} list={this.state.NameSymptoms} deletion={this.removeName} />\r\n                  )\r\n              })}\r\n          </div>\r\n          </section>\r\n\r\n        <Container>\r\n          <Row style={{marginTop: 'calc(8vh)'}}>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={16} updateArray={this.updateMarkedSymptoms} type={\"Abdomen\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={16} updateArray={this.updateMarkedSymptoms} type={\"Pelvis\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms }id={16} updateArray={this.updateMarkedSymptoms} type={\"Buttocks\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={7} updateArray={this.updateMarkedSymptoms} type={\"Arms\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={7} updateArray={this.updateMarkedSymptoms} type={\"Shoulder\"}/>\r\n          </Row>\r\n\r\n          <Row style={{marginTop: 'calc(8vh)'}}>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={6} updateArray={this.updateMarkedSymptoms} type={\"Head\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={6} updateArray={this.updateMarkedSymptoms} type={\"Throat\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={6} updateArray={this.updateMarkedSymptoms} type={\"Neck\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={10} updateArray={this.updateMarkedSymptoms} type={\"Legs\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={17} updateArray={this.updateMarkedSymptoms} type={\"Skin\"}/>\r\n          </Row>\r\n\r\n          <Row style={{marginTop: 'calc(8vh)'}}>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={15} updateArray={this.updateMarkedSymptoms} type={\"Chest\"} offset={2}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={15} updateArray={this.updateMarkedSymptoms} type={\"Back\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={17} updateArray={this.updateMarkedSymptoms} type={\"Joints\"}/>\r\n            <ButtonTab array={this.state.MarkedSymptoms} nameArray={this.state.NameSymptoms} id={17} updateArray={this.updateMarkedSymptoms} type={\"General\"}/>\r\n          </Row>\r\n\r\n          <Row style={{marginTop: 'calc(12vh)'}}>\r\n            <Col md={{ span: 3, offset: 5 }}>\r\n              <Link to={ROUTES.SYMPTOM_LIST}>\r\n                <Button \r\n                      onClick={()=>{\r\n                        const uniqueIds = Array.from(new Set(this.state.MarkedSymptoms));\r\n                        localStorage.setItem('symptomIds', JSON.stringify(uniqueIds));\r\n                        localStorage.setItem('symptom-body', JSON.stringify(this.state.NameSymptoms))\r\n                      }}\r\n                      style={{backgroundColor: '#FE817B', border: 'none', borderRadius: 'calc(1vw)', \r\n                      paddingRight: 'calc(1.5vw)', paddingLeft: 'calc(1.5vw)'}}\r\n                      variant=\"primary\"\r\n                      type=\"submit\"\r\n                      disabled={this.state.isDisabled}>Next: Select Symptoms</Button>\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <div className=\"progress-bar-div\">\r\n          <div className=\"progress-bar-div-center\">\r\n            <ProgressBar now={40} label={\"40%\"} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Symptoms","import React from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport { Container, Row, Col, Spinner, Button, ProgressBar } from \"react-bootstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { ROUTES } from \"../routes\";\r\nimport SelectedTab from '../components/SelectedTab';\r\nimport '../css/SymptomList.css';\r\nimport '../App.css'\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst NamesTab = localStorage.getItem('symptom-body');\r\n\r\nclass SymptomList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            OptionsList: [],\r\n            NamesList: NamesTab !== null && NamesTab !== undefined  && NamesTab !== 'undefined' ? JSON.parse(localStorage.getItem('symptom-body')) : [],\r\n            SymptomsArray: [],\r\n            Loading: true\r\n        }\r\n\r\n        this.removeName = this.removeName.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    removeName(list) {\r\n        this.setState({NamesList: list}, () => {\r\n            localStorage.setItem('symptom-body', JSON.stringify(this.state.NamesList));\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({SymptomsArray: e}, () => {\r\n            localStorage.setItem('symptom-types', JSON.stringify(this.state.SymptomsArray));\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let symptomsArray = [];\r\n        if(localStorage.getItem('symptom-types')) {\r\n            symptomsArray = JSON.parse(localStorage.getItem('symptom-types'));\r\n        } \r\n\r\n        fetch('/symptoms')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let arr = this.state.OptionsList;\r\n            data.forEach(symptom => {\r\n                let obj = {};\r\n                obj.value = symptom.ID;\r\n                obj.label = symptom.Name;\r\n                arr.push(obj);      \r\n            })\r\n            this.setState({OptionsList: arr, Loading: false, SymptomsArray: symptomsArray}); \r\n        }).catch(error => {\r\n            console.log(error) \r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.NamesList)\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row style={{marginLeft: 'calc(8vw)'}}>\r\n                        <Col md={{ span: 4, offset: 4 }}><h2>What are the symptoms?</h2></Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <section className=\"body-section\">\r\n                    <div className=\"body-div\">\r\n                        {this.state.NamesList.map(name => {\r\n                            return (\r\n                                <SelectedTab name={name} list={this.state.NamesList} deletion={this.removeName} />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"select-section\">\r\n                    <div className=\"select-div-input\">\r\n                        {this.state.Loading ? \r\n                            <div className=\"spinner-div\"><Spinner animation=\"border\" variant=\"info\" /></div>\r\n                        : \r\n                            <Select\r\n                            closeMenuOnSelect={false}\r\n                            components={animatedComponents}\r\n                            isMulti\r\n                            options={this.state.OptionsList}\r\n                            placeholder={\"Select Symptoms...\"}\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            value={this.state.SymptomsArray}\r\n                        /> } \r\n                    </div>\r\n                </section>\r\n\r\n                <Container>\r\n                    <Row style={{marginTop: 'calc(40vh)'}}>\r\n                        <Col md={{ span: 3, offset: 5 }}>\r\n                        <Link to={ROUTES.PRELIMINARYDIAGNOSIS}>\r\n                            <Button \r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{backgroundColor: '#FE817B', border: 'none', borderRadius: 'calc(1vw)', \r\n                                paddingRight: 'calc(1.5vw)', paddingLeft: 'calc(1.5vw)'}}\r\n                                disabled={this.state.isDisabled}>Next: Get Diagnosis</Button>\r\n                        </Link>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <div className=\"progress-bar-div\">\r\n                    <div className=\"progress-bar-div-center\">\r\n                        <ProgressBar now={60} label={\"60%\"} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SymptomList;","import React from 'react';\r\nimport { Container, Row, Col, ListGroup, Spinner, Card, Button, ProgressBar } from 'react-bootstrap';\r\nimport SelectedTab from '../components/SelectedTab';\r\nimport { Link } from 'react-router-dom';\r\nimport { ROUTES } from \"../routes\";\r\nimport '../css/Diagnosis.css';\r\nimport '../App.css';\r\n\r\nclass PreliminaryDiagnosis extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const getSymptoms = localStorage.getItem('symptom-types');\r\n        const getBodyPartsID = localStorage.getItem('symptomIds');\r\n        const getBodyParts = localStorage.getItem('symptom-body');\r\n\r\n        this.state = {\r\n            MySymptoms: [],\r\n            SymptomsList: getSymptoms !== null && getSymptoms !== undefined  && getSymptoms !== 'undefined' && getSymptoms !== 'null' ? JSON.parse(getSymptoms) : [],\r\n            BodyPartsId: getBodyPartsID !== null && getBodyPartsID !== undefined  && getBodyPartsID !== 'undefined' ? JSON.parse(getBodyPartsID) : [],\r\n            BodyParts: getBodyParts !== null && getBodyParts !== undefined  && getBodyParts !== 'undefined' ? JSON.parse(getBodyParts) : [],\r\n            Diagnosis: [],\r\n            Loading: true\r\n        }\r\n\r\n        this.removeName = this.removeName.bind(this);\r\n        this.removeBody = this.removeBody.bind(this);\r\n    }\r\n\r\n    removeName(list) {\r\n        this.setState({SymptomsList: list}, () => {\r\n            localStorage.setItem('symptom-types', JSON.stringify(this.state.SymptomsList));\r\n            window.location.reload();\r\n        });\r\n    }\r\n\r\n    removeBody(list) {\r\n        this.setState({BodyParts: list}, () => {\r\n            localStorage.setItem('symptom-body', JSON.stringify(this.state.BodyParts));\r\n            window.location.reload();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let ids = []\r\n        this.state.SymptomsList.forEach(symptoms => {\r\n            ids.push(symptoms.value);\r\n        })\r\n\r\n        this.state.BodyPartsId.forEach(symptoms => {\r\n            ids.push(symptoms);\r\n        })\r\n\r\n        fetch('/diagnosis', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                Symptoms: ids,\r\n                Gender: 'male',\r\n                Age: 2000\r\n            })   \r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            console.log(data);\r\n            this.setState({Diagnosis: data, Loading: false});\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col md={{ span: 2, offset: 1 }}>\r\n                            <div>\r\n                                <Card style={{width: '25vw', marginTop: 'calc(4vh)'}}>\r\n                                    <Card.Body>\r\n                                    <Card.Title style={{float: 'left', width: '100%'}}>All Selected Symptoms</Card.Title>\r\n                                    <Card.Text style={{float: 'left'}}>\r\n                                        <div className=\"card-tabs-div\">\r\n                                            {this.state.BodyParts.map(body => {\r\n                                                return (\r\n                                                    <SelectedTab name={body} list={this.state.BodyParts} deletion={this.removeBody} isDiagnosis={true} />    \r\n                                                )\r\n                                            })}\r\n                                            {this.state.SymptomsList.map(symptom => {\r\n                                                console.log(symptom)\r\n                                                return (\r\n                                                    <SelectedTab name={symptom.label} list={this.state.SymptomsList} deletionObj={this.removeName}/>\r\n                                                )\r\n                                            })}\r\n                                        </div>\r\n                                    </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card> \r\n                            </div>\r\n                        </Col>\r\n                        <Col  md={{ span: 3, offset: 2 }}>\r\n                            <div className=\"listgroup-div\">\r\n                                <ListGroup variant=\"flush\">\r\n                                    <ListGroup.Item style={{fontSize: 'calc(1.3vw)', backgroundColor: '#4D6466', color: 'white'}}>Possible Diagnosis</ListGroup.Item>\r\n                                    <div className=\"listgroup-item-div\">\r\n                                        {this.state.Loading ? \r\n                                        <div className=\"listgroup-loading\">\r\n                                            <Spinner animation=\"border\" variant=\"info\" />\r\n                                        </div> :\r\n                                        (this.state.Diagnosis.length === 0 ? \r\n                                        <h3 className=\"no-diagnosis\">There appears to be no diagnosis right now...</h3> : this.state.Diagnosis.map(diagnosis => {\r\n                                            return (\r\n                                                <div className=\"single-tile-div\">\r\n                                                    <ListGroup.Item>\r\n                                                        <h3 className=\"single-tile-div-name\">{diagnosis.Issue.Name}</h3>\r\n                                                    </ListGroup.Item>\r\n                                                </div>\r\n                                            )\r\n                                        }))}\r\n                                    </div>\r\n                                </ListGroup>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.state.Loading ? null : \r\n                    <Row style={{marginTop: 'calc(10vh)'}}>\r\n                        <Col md={{ span: 3, offset: 5 }}>\r\n                        <Link to={ROUTES.CLINICS}>\r\n                            <Button \r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{backgroundColor: '#FE817B', border: 'none', borderRadius: 'calc(1vw)', \r\n                                paddingRight: 'calc(1.5vw)', paddingLeft: 'calc(1.5vw)'}}\r\n                                >Next: Find nearest clinic</Button>\r\n                        </Link>\r\n                        </Col>\r\n                    </Row>}\r\n\r\n                </Container>\r\n\r\n                {this.state.Loading ? null : \r\n                <div className=\"progress-bar-div\">\r\n                    <div className=\"progress-bar-div-center\">\r\n                        <ProgressBar now={80} label={\"80%\"} />\r\n                    </div>\r\n                </div>}\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PreliminaryDiagnosis;","import React from 'react'\r\n\r\nclass Confirmation extends React.Component {\r\nrender(){\r\n    return(\r\n    <div>\r\n        Confirmation Page\r\n    </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Confirmation;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n/* Misc */\r\nimport { ROUTES } from \"./routes\";\r\n\r\n/* Components */\r\nimport Navigation from \"./Pages/Navigation\";\r\nimport Personal_info from \"./Pages/Personal_info\";\r\nimport Landing from \"./Pages/Landing\";\r\nimport Symptoms from \"./Pages/Symptoms\";\r\nimport SymptomList from \"./Pages/SymptomList\";\r\nimport Breadcrumbs from \"./Pages/Breadcrumbs\";\r\nimport PreliminaryDiagnosis from  './Pages/PreliminaryDiagnosis';\r\nimport Clinics from \"./Pages/clinics_near_me\";\r\nimport Confirmation from './Pages/confirmation';\r\n\r\nfunction App() {\r\n  return (\r\n    //The router navigates to the different pages\r\n    <React.Fragment>\r\n      <Router>\r\n        <Navigation />\r\n        <Breadcrumbs />\r\n        <Switch>\r\n          <Route exact path={ROUTES.LANDING} component={Landing} />\r\n          <Route exact path={ROUTES.INFO} component={Personal_info} />\r\n          <Route exact path={ROUTES.SYMPTOMS} component={Symptoms} />\r\n          <Route exact path={ROUTES.SYMPTOM_LIST} component={SymptomList} />\r\n          <Route exact path={ROUTES.PRELIMINARYDIAGNOSIS} component={PreliminaryDiagnosis} />\r\n          <Route exact path={ROUTES.CLINICS} component={Clinics} />\r\n          <Route exact path={ROUTES.CONFIRMATION} component={Confirmation} />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}